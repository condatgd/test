package katas.maze.mazeterminal0;

import static katas.maze.mazeterminal0.MatrixValue.FREE;

public class MazeExamples {

    public static void main(String[] args) {
        String[] lines = mazeSmallStr.split("\n");
        int dimy = lines.length;
        int dimx = lines[0].length();
        MatrixValue[][] mazeMatrix = new MatrixValue[dimy][dimx];
        for (int i = 0; i < dimy; i++) {
            for (int j = 0; j < dimx; j++) {
                mazeMatrix[i][j] = MatrixValue.getValueForChar(lines[i].charAt(j)).orElse(FREE);
            }
        }

        for (int y = 0; y < dimy; y++) {
            for (int x = 0; x < dimx; x++) {
                MatrixValue v = mazeMatrix[y][x];
                if(v.equals(FREE)) {
                    printDoor(x,y,x,y-1, mazeMatrix, dimy, dimx);
                    printDoor(x,y,x,y+1, mazeMatrix, dimy, dimx);
                    printDoor(x,y,x-1,y, mazeMatrix, dimy, dimx);
                    printDoor(x,y,x+1,y, mazeMatrix, dimy, dimx);
                }
            }
        }
    }

    private static void printDoor(int x, int y, int x1, int y1, MatrixValue[][] mazeMatrix, int dimy, int dimx) {
        if(0<=x1 && x1<dimx && 0<=y1 && y1<dimy && mazeMatrix[y1][x1].equals(FREE)) {
            System.out.println("tuer('" + x + "," + y + "', '" + x1 + "," + y1 + "')." );
        }
    }

    public static String mazeSmallStr =
            """
                    █1████████████████████████████
                    █ █                    █     █
                    █ █  ███████  █  █  █  █  ████
                    █    █     █  █  █  █     █  █
                    █ █  █  ████  ███████  ████  █
                    █ █  █     █     █           X
                    ██████████████████████████████""";

    public static String mazeBigStr =
            """
                     1███████████████████████████████████████████████████████████████████████████████
                      █         █   █           █         █     █ █   █   █   █     █ █   █         █
                    █ ███ █ █ ███ ███████ █████ █████ █ █ █ ███ █ █ █ ███ █ █████ ███ █ █ █ ███ ███ █
                    █ █ █ █ █   █   █     █   █ █ █ █ █ █   █     █ █ █       █         █ █   █   █ █
                    █ █ █ █ ███ █ ███ █ █ ███ ███ █ █ ███████ █ █ ███ █ █████████ ███████ █ ███ █ █ █
                    █     █ █   █     █ █   █   █         █   █ █ █ █   █ █ █       █       █   █ █ █
                    ███ █ ███████ ███ ███ █████ ███ █████ █████ ███ █ ███ █ █ █ █ ███████ ███ █ ███ █
                    █   █   █   █   █ █     █   █       █     █   █ █     █   █ █   █     █   █   █ █
                    ███ █ ███ █████ ███ █ █ █ █ █ █████ ███ █ █ ███ ███ █ █ ███████ ███ ███ █████████
                    █ █ █ █   █     █ █ █ █ █ █     █ █ █   █ █ █   █   █   █         █ █     █ █ █ █
                    █ █ █ █ █ █ ███ █ ███████ █████ █ █ ███████ ███ ███ ███████ █████ ███████ █ █ █ █
                    █   █   █ █ █           █ █ █     █   █       █ █ █     █   █ █ █ █   █         █
                    ███ ███ ███ ███ █████ ███ █ ███████ █ █ ███████ █ ███████ ███ █ ███ █ █ ███ █████
                    █     █       █     █     █ █ █ █   █ █ █     █ █     █       █ █ █ █ █   █ █   █
                    █ ███████ █ █████ ███ █ ███ █ █ █████████ ███ █ ███ █ █ █████ █ █ ███ ███ █████ █
                    █   █   █ █     █   █ █ █       █ █ █     █ █       █ █ █             █   █   █ █
                    ███ █ ███████ █████ █████ ███████ █ ███ ███ ███ █████ █ █████ █████ ███ █████ █ █
                    █ █ █           █   █   █     █         █       █         █       █   █ █   █   █
                    █ █ █████ █ █ █ ███ ███ ███ █████ ███ ███ █████ ███ ███████ ███████ █ █████ █ █ █
                    █     █ █ █ █ █   █   █ █ █       █ █ █     █ █ █   █     █ █   █   █   █     █ █
                    █ █████ ███ █████████ █ █ ███ █ █ █ █ █████ █ █████ ███ █████ ███ █ ███████ █████
                    █     █     █     █       █   █ █ █       █   █   █     █ █       █ █ █ █ █     █
                    █ █ █ █████ █ █████ █████ ███ █ ███ █████████████ ███████ █ ███ ███ █ █ █ ███ █ █
                    █ █ █ █           █   █ █     █   █   █   █ █ █       █ █ █   █ █   █ █     █ █ █
                    █████ █ ███ ███████ ███ █ ███ ███████ █ ███ █ ███ ███ █ █ █ █ █ ███ █ █████ █ █ █
                    █     █   █   █   █   █     █     █     █     █   █       █ █ █ █   █   █ █   █ █
                    █████ █ █████ █ █ ███ ███ ███ █████ █ █ ███ ███████ █ █████ ███████████ █ █ ███ █
                    █     █ █       █ █   █   █     █   █ █       █   █ █             █     █   █   █
                    █ ███ ███████████████████ █████ █ ███ ███████████ █ █ █ ███████████ █ █ █ █ █ ███
                    █ █ █     █         █   █ █ █   █   █ █   █       █ █ █     █ █   █ █ █   █ █   █
                    █ █ █ █ █████████ █████ ███ █████ ███ █ █ █ ███████ █ ███ ███ █ █ █████████ ███ █
                    █   █ █     █       █   █ █ █     █ █ █ █     █     █ █   █   █ █   █         █ █
                    █ ███ ███ █ ███ █████ █ █ █ █ █████ █ █ ███ █ █████ █ ███ █ █████ █████ █████ █ █
                    █ █ █ █   █   █   █   █     █       █   █ █ █ █   █ █ █ █   █       █     █   █ █
                    ███ ███ ███ █████ █ █████████████ ███████ ███ █ █ ███ █ █████ ███ █████ ███ █ ███
                    █ █     █ █   █       █   █ █         █   █ █ █ █             █ █   █   █   █ █ █
                    █ █████ █ █ █ █ █████ █ ███ █ ███ ███████ █ ███████ ███ █████ █ ███ █ ███ █ █ █ █
                    █       █ █ █   █ █     █   █   █ █     █       █     █ █         █   █   █ █ █ █
                    ███ █████ █ ███ █ █ █ ███ █ █████ █ ███ █ █ ███ ███ █████ █ ███ █████ █ █ ███ █ █
                    █   █         █ █   █ █   █         █   █ █   █     █     █ █   █     █ █   █   X
                    █████████████████████████████████████████████████████████████████████████████████""";


    /*
tuer(a,b).
tuer(b,e).
tuer(b,c).
tuer(d,e).
tuer(c,d).
tuer(e,f).
tuer(g,e).

weg(X,X, [X]) :- !.
weg(X,Y, [X|WEG]) :-
    tuer(X,X1), write(tuer(X,X1)),nl,
    weg(X1,Y, WEG).

t:- weg(a,c, WEG),
    write(WEG),nl.
     */

}
